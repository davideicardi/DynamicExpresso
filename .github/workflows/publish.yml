name: Publish packages
on:
  release: # on new releases
    types: [created]
  workflow_dispatch: # manual event
    inputs:
      ref:
        description: 'The branch, tag or SHA to checkout'
        required: true
        default: 'master'
      isSnapshot:
        description: 'Is snapshot release? Set to false if this is an official release'
        required: true
        default: 'true'
jobs:
  publish-nuget:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        ref: "${{ github.event.inputs.ref }}"
        fetch-depth: '0' # all
    - name: Setup .NET Core 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Setup gitversion
      run: dotnet tool install --global GitVersion.Tool
    - name: Calculate version
      id: calc_version
      run: |
        GITVERSION=$(dotnet-gitversion /output json /showvariable FullSemVer)
        echo "::set-output name=PROJECT_VERSION::$GITVERSION"
    - name: Restore packages
      run: dotnet restore DynamicExpresso.sln
    - name: Build
      run: dotnet build DynamicExpresso.sln --no-restore -c Release /p:Version=${{steps.calc_version.outputs.PROJECT_VERSION}}
    - name: Test .net core 5.0
      run: dotnet test DynamicExpresso.sln --no-restore -c Release --verbosity normal -f netcoreapp5.0
    - name: Setup nuget sources
      run: |
        dotnet nuget add source --name github "https://nuget.pkg.github.com/davideicardi/index.json"
        dotnet nuget add source --name official "https://api.nuget.org/v3/index.json"
    - name: Pack
      run: dotnet pack DynamicExpresso.sln --no-restore -c Release /p:Version=${{steps.calc_version.outputs.PROJECT_VERSION}} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
    - name: Publish github package
      run: dotnet nuget push "src/DynamicExpresso.Core/bin/Release/DynamicExpresso.Core.${{steps.calc_version.outputs.PROJECT_VERSION}}.nupkg" --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
    - name: Publish official
      if: ${{ github.event.inputs.isSnapshot != 'true' }}
      run: dotnet nuget push "src/DynamicExpresso.Core/bin/Release/DynamicExpresso.Core.${{steps.calc_version.outputs.PROJECT_VERSION}}.nupkg" --source "official" --api-key ${{ secrets.NUGET_KEY }}

  # publish:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       ref: "${{ github.event.inputs.ref }}"
  #       fetch-depth: 0
  #   - name: Set up JDK 1.8
  #     uses: actions/setup-java@v1
  #     with:
  #       java-version: 1.8
  #       gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import, use "gpg --armor --export-secret-keys YOUR_ID" to export your key
  #       gpg-passphrase: PGP_PASSPHRASE # env variable name used for GPG private key passphrase
  #   - name: Compile
  #     run: sbt +compile
  #   - name: Test
  #     run: sbt +test
  #   - name: Publish staging
  #     run: sbt +publishSigned
  #     env:
  #       SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
  #       PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }} # sbt-pgp use this env variable to get passphrase
  #   - name: Publish release
  #     # TODO We should try to do this step automatically inside sbt:
  #     #  if sbt variable isSnapshot is false, now we use a manual event setting
  #     if: ${{ github.event.inputs.isSnapshot != 'true' }}
  #     run: sbt sonatypeBundleRelease
  #     env:
  #       SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
  #       PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }} # sbt-pgp use this env variable to get passphrase
